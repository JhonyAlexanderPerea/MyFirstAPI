openapi: 3.1.0
info:
  title: MyFirstAPI
  description: Implementaci칩n b치sica de una API para gestionar usuarios
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Servidor local

paths:
  /api/v1/users:
    get:
      summary: Obtener todos los usuarios
      operationId: getUsers
      parameters:
        - name: page
          in: query
          description: N칰mero de p치gina (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Cantidad de elementos por p치gina
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de usuarios obtenida correctamente 游녧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedUserResponse'
    post:
      summary: Registrar un nuevo usuario
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDTO'
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'

  /api/v1/users/{id}:
    get:
      summary: Obtener un usuario por ID
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: Usuario no encontrado
    delete:
      summary: Eliminar un usuario por ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario eliminado correctamente
    put:
      summary: Actualizar toda la informaci칩n de un usuario
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: Identificador 칰nico del usuario a actualizar
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateDTO"
      responses:
        '200':
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          description: Datos de entrada inv치lidos
        '404':
          description: Usuario no encontrado

  /api/v1/users/{id}/password:
    patch:
      summary: Actualizar la contrase침a de un usuario
      operationId: updatePassword
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateDTO'
      responses:
        '200':
          description: Contrase침a actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          description: Contrase침a actual incorrecta

components:
  schemas:
    UserResponseDTO:
      type: object
      properties:
        id:
          type: string
          format: string
        email:
          type: string
        fullName:
          type: string
        dateOfBirth:
          type: string
          format: date
        rol:
          type: string
          enum: [USER, ADMIN]

    UserUpdateDTO:
      type: object
      required: [id]
      properties:
        email:
          type: string
        fullName:
          type: string
        dateOfBirth:
          type: string
          format: date
        rol:
          type: string
          enum: [USER, ADMIN]

    UserRegistrationDTO:
      type: object
      required: [email, fullName, password, dateBirth, rol]
      properties:
        email:
          type: string
          format: email
        fullName:
          type: string
        password:
          type: string
        dateOfBirth:
          type: string
          format: date
        rol:
          type: string
          enum: [USER, ADMIN]

    PasswordUpdateDTO:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string

    PaginatedUserResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseDTO'
        totalPages:
          type: integer
          description: N칰mero total de p치ginas
        totalElements:
          type: integer
          description: N칰mero total de elementos
        currentPage:
          type: integer
          description: P치gina actual
        pageSize:
          type: integer
          description: Tama침o de la p치gina
